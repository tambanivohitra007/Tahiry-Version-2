// ------------------------------------------------------------
// Author: Rindra Razafinjatovo
// Created on: 2018
// Last Modified: Dec 2024
// Project: Tahiry
// Description: A collection of Bible and Hymnals to streamline and enhance worship presentations for churches.
// ------------------------------------------------------------

ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using Fihirana_database.Classes;

namespace Fihirana_database.fihirana
{
    public static class ConnectionHelper
    {
        static Type[] persistentTypes = new Type[] {
            typeof(books),
            typeof(Category),
            typeof(Hymnal),
            typeof(HymnalHymnals_CategoryCategories),
            typeof(verses_LSG),
            typeof(verses_MLG)
        };
        public static Type[] GetPersistentTypes()
        {
            Type[] copy = new Type[persistentTypes.Length];
            Array.Copy(persistentTypes, copy, persistentTypes.Length);
            return copy;
        }
        public static string ConnectionString { get { return $"XpoProvider=SQLite;Data Source = {ClassSettings.DataSource()};Version=3"; } }
        public static void Connect(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption, bool threadSafe = false)
        {
            try
            {
                if (string.IsNullOrEmpty(ConnectionString))
                    throw new ArgumentNullException(nameof(ConnectionString), "The connection string is null or empty.");

                if (threadSafe)
                {
                    SQLitePCL.Batteries_V2.Init(); // Initialize SQLCipher
                    var provider = XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption);
                    if (provider == null)
                        throw new InvalidOperationException("Could not initialize the connection provider.");

                    var dictionary = new DevExpress.Xpo.Metadata.ReflectionDictionary();
                    dictionary.GetDataStoreSchema(persistentTypes);

                    XpoDefault.DataLayer = new ThreadSafeDataLayer(dictionary, provider);
                }
                else
                {
                    XpoDefault.DataLayer = XpoDefault.GetDataLayer(ConnectionString, autoCreateOption);
                }

                XpoDefault.Session = null;
            }
            catch (Exception ex)
            {
                throw new NullReferenceException($"Failed to establish a connection. Details: {ex.Message}", ex);
            }
        }

        public static DevExpress.Xpo.DB.IDataStore GetConnectionProvider(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption)
        {
            return XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption);
        }
        public static DevExpress.Xpo.DB.IDataStore GetConnectionProvider(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption, out IDisposable[] objectsToDisposeOnDisconnect)
        {
            return XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption, out objectsToDisposeOnDisconnect);
        }
        public static IDataLayer GetDataLayer(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption)
        {
            return XpoDefault.GetDataLayer(ConnectionString, autoCreateOption);
        }
    }

}
